<?xml version="1.0" standalone="no"?>
<!DOCTYPE refentry PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN"
    "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<refentry id="class-nautilus-python-info-provider" xmlns:xi="http://www.w3.org/2001/XInclude">
  <refmeta>
    <refentrytitle>Nautilus.InfoProvider</refentrytitle>
  </refmeta>
  <refnamediv>
    <refname>Nautilus.InfoProvider</refname>
    <refpurpose>Nautilus.InfoProvider Reference</refpurpose>
  </refnamediv>

<!-- ******************************* -->
<!-- BEGIN OF SYNOPSIS -->
<!-- ******************************* -->

  <refsect1>
    <title>Synopsis</title>

    <classsynopsis language="python">
      <ooclass><classname>Nautilus.InfoProvider</classname></ooclass>

      <methodsynopsis language="python">
        <methodname><link linkend="method-nautilus-python-info-provider--update-file-info">update_file_info</link></methodname>
        <methodparam><parameter role="keyword">file</parameter></methodparam>
      </methodsynopsis>

      <methodsynopsis language="python">
        <methodname><link linkend="method-nautilus-python-info-provider--update-file-info-full">update_file_info_full</link></methodname>
        <methodparam><parameter role="keyword">provider</parameter></methodparam>
        <methodparam><parameter role="keyword">handle</parameter></methodparam>
        <methodparam><parameter role="keyword">closure</parameter></methodparam>
        <methodparam><parameter role="keyword">file</parameter></methodparam>
      </methodsynopsis>

      <methodsynopsis language="python">
        <methodname><link linkend="method-nautilus-python-info-provider--cancel-update">cancel_update</link></methodname>
        <methodparam><parameter role="keyword">provider</parameter></methodparam>
        <methodparam><parameter role="keyword">handle</parameter></methodparam>
      </methodsynopsis>

      <methodsynopsis language="python">
        <methodname><link linkend="method-nautilus-python-info-provider--update-complete-invoke">Nautilus.info_provider_update_complete_invoke</link></methodname>
        <methodparam><parameter role="keyword">provider</parameter></methodparam>
        <methodparam><parameter role="keyword">handle</parameter></methodparam>
        <methodparam><parameter role="keyword">closure</parameter></methodparam>
        <methodparam><parameter role="keyword">result</parameter><initializer>Nautilus.OperationResult.COMPLETE</initializer></methodparam>
      </methodsynopsis>
    </classsynopsis>
  </refsect1>

<!-- ********************************** -->
<!-- BEGIN OF DESCRIPTION -->
<!-- ********************************** -->

  <refsect1 id="description-info-provider">
    <title>Description</title>

      <para>
      If subclassed, Nautilus will call update_file_info(_full) to notify extensions of which
      files are being viewed by the user.  This gives extensions an opportunity to invoke actions on the files,
      or to add emblems or attributes.
      </para>

<example>
    <title>Nautilus.InfoProvider Example</title>
    <programlisting><xi:include href="../../examples/update-file-info-async.py" parse="text" /></programlisting>
</example>
        
  </refsect1>

<!-- ****************************** -->
<!-- BEGIN OF METHODS -->
<!-- ****************************** -->

  <refsect1>
        <title>Passive Methods</title>

        <refsect2 id="method-nautilus-python-info-provider--update-file-info">
          <title>Nautilus.InfoProvider.update_file_info</title>

          <programlisting><methodsynopsis language="python">
            <methodname>update_file_info</methodname>
            <methodparam><parameter role="keyword">file</parameter></methodparam>
          </methodsynopsis></programlisting>

          <variablelist>
            <varlistentry>
	            <term><parameter role="keyword">file</parameter>&nbsp;:</term>
	            <listitem><simpara>a <link linkend="class-nautilus-python-file-info"><classname>Nautilus.FileInfo</classname></link> object</simpara></listitem>
            </varlistentry>
          </variablelist>

          <para>
                This method is called by Nautilus for each file or folder that exists under the
                current directory listing.  There is no return value.
          </para>
        </refsect2>


        <refsect2 id="method-nautilus-python-info-provider--update-file-info-full">
          <title>Nautilus.InfoProvider.update_file_info_full</title>

          <programlisting><methodsynopsis language="python">
            <methodname>update_file_info_full</methodname>
            <methodparam><parameter role="keyword">provider</parameter></methodparam>
            <methodparam><parameter role="keyword">handle</parameter></methodparam>
            <methodparam><parameter role="keyword">closure</parameter></methodparam>
            <methodparam><parameter role="keyword">file</parameter></methodparam>
          </methodsynopsis></programlisting>

          <variablelist>
            <varlistentry>
	            <term><parameter role="keyword">provider</parameter>&nbsp;:</term>
	            <listitem><simpara>the current <link linkend="class-nautilus-python-info-provider"><classname>Nautilus.InfoProvider</classname></link> instance</simpara></listitem>
            </varlistentry>
            <varlistentry>
	            <term><parameter role="keyword">handle</parameter>&nbsp;:</term>
	            <listitem><simpara>a <classname>gobject.gpointer</classname> generated solely to track this call</simpara></listitem>
            </varlistentry>
            <varlistentry>
	            <term><parameter role="keyword">closure</parameter>&nbsp;:</term>
	            <listitem><simpara>a C Closure that must be passed to <link linkend="method-nautilus-python-info-provider--update-complete-invoke">Nautilus.info_provider_update_complete_invoke</link> if that method is called</simpara></listitem>
            </varlistentry>
            <varlistentry>
	            <term><parameter role="keyword">file</parameter>&nbsp;:</term>
	            <listitem><simpara>a <link linkend="class-nautilus-python-file-info"><classname>Nautilus.FileInfo</classname></link> object</simpara></listitem>
            </varlistentry>
            <varlistentry>
                <term><emphasis>Returns</emphasis>&nbsp;:</term>
                <listitem><simpara>None or a <link linkend="enum-nautilus-python-operation-result"><classname>Nautilus.OperationResult</classname></link> enum</simpara></listitem>
            </varlistentry>
          </variablelist>

          <para>
                This method is called by Nautilus for each file or folder that exists under the
                current directory listing.  Originally, <link linkend="class-nautilus-python-info-provider"><classname>Nautilus.InfoProvider</classname></link>
                only provided the update_file_info
                method, which blocked Nautilus when the method required a lot of computation time.  This method was 
                created to allow an extension to tell Nautilus that it will be spending time on an operation and that
                Nautilus should not block itself during that time.
          </para>
          <para>
                In order to notify Nautilus of your extension's intentions, you must return a 
                <link linkend="enum-nautilus-python-operation-result"><classname>Nautilus.OperationResult</classname></link> enum.  
                Then, when the operation has completed, call the Nautilus.info_provider_update_complete_invoke method, passing the provider, 
                handle and closure variables as parameters.
          </para>
          <para>
                This method was created for backwards compatibility reasons.  If your
                extension used the <link linkend="method-nautilus-python-info-provider--update-file-info"><function>update_file_info</function></link> method and you want non-blocking 
                usage, you should switch to this method.
          </para>
          <note>
            This method was introduced in nautilus-python 0.7.0.
          </note>
        </refsect2>


        <refsect2 id="method-nautilus-python-info-provider--cancel-update">
          <title>Nautilus.InfoProvider.cancel_update</title>

          <programlisting><methodsynopsis language="python">
            <methodname>cancel_update</methodname>
            <methodparam><parameter role="keyword">provider</parameter></methodparam>
            <methodparam><parameter role="keyword">handle</parameter></methodparam>
          </methodsynopsis></programlisting>

          <variablelist>
            <varlistentry>
	            <term><parameter role="keyword">provider</parameter>&nbsp;:</term>
	            <listitem><simpara>the current <link linkend="class-nautilus-python-info-provider"><classname>Nautilus.InfoProvider</classname></link> instance</simpara></listitem>
            </varlistentry>
            <varlistentry>
	            <term><parameter role="keyword">handle</parameter>&nbsp;:</term>
	            <listitem><simpara>a <classname>gobject.gpointer</classname> generated by a specific update_file_info_full call</simpara></listitem>
            </varlistentry>
          </variablelist>

          <para>
            This method is called by Nautilus when an update_file_info_full call is in progress
            but is no longer required.  This may happen because the user is moving directories or a file
            has been deleted, etc.  You may use the handle parameter here to match the
            handle parameter passed in <link linkend="method-nautilus-python-info-provider--update-file-info-full"><function>update_file_info_full</function></link>.
          </para>
          <note>
            This method was introduced in nautilus-python 0.7.0.
          </note>
        </refsect2>
    </refsect1>

    <refsect1>
        <title>Active Methods</title>

        <refsect2 id="method-nautilus-python-info-provider--update-complete-invoke">
          <title>Nautilus.info_provider_update_complete_invoke</title>

          <programlisting><methodsynopsis language="python">
            <methodname>info_provider_update_complete_invoke</methodname>
            <methodparam><parameter role="keyword">provider</parameter></methodparam>
            <methodparam><parameter role="keyword">handle</parameter></methodparam>
            <methodparam><parameter role="keyword">closure</parameter></methodparam>
            <methodparam><parameter role="keyword">result</parameter><initializer>Nautilus.OperationResult.COMPLETE</initializer></methodparam>
          </methodsynopsis></programlisting>

          <variablelist>
            <varlistentry>
	            <term><parameter role="keyword">provider</parameter>&nbsp;:</term>
	            <listitem><simpara>the current <link linkend="class-nautilus-python-info-provider"><classname>Nautilus.InfoProvider</classname></link> instance</simpara></listitem>
            </varlistentry>
            <varlistentry>
	            <term><parameter role="keyword">handle</parameter>&nbsp;:</term>
	            <listitem><simpara>a <classname>gobject.gpointer</classname> generated by a specific update_file_info_full call</simpara></listitem>
            </varlistentry>
            <varlistentry>
	            <term><parameter role="keyword">closure</parameter>&nbsp;:</term>
	            <listitem><simpara>a C Closure that must be passed to <link linkend="method-nautilus-python-info-provider--update-complete-invoke">Nautilus.info_provider_update_complete_invoke</link> if that method is called</simpara></listitem>
            </varlistentry>
            <varlistentry>
	            <term><parameter role="keyword">result</parameter>&nbsp;:</term>
	            <listitem><simpara>an optional parameter.  If left out, <link linkend="enum-nautilus-python-operation-result--OPERATION_COMPLETE"><classname>Nautilus.OperationResult.COMPLETE</classname></link> is assumed.  
	            Otherwise, you may pass any any of the <link linkend="enum-nautilus-python-operation-result"><classname>Nautilus.OperationResult</classname></link> enums.</simpara></listitem>
            </varlistentry>
          </variablelist>

          <para>
            An extension must call this method for each update_file_info_full method that
            returns the <link linkend="enum-nautilus-python-operation-result--OPERATION_IN_PROGRESS"><classname>Nautilus.OperationResult.IN_PROGRESS</classname></link> enum.  
            The method must be called with the provider, handle, and closure parameters which were passed to the earlier <link linkend="method-nautilus-python-info-provider--update-file-info-full"><function>update_file_info_full</function></link> method.
          </para>
          <note>
            This method was introduced in nautilus-python 0.7.0.
          </note>
        </refsect2>
    </refsect1>

</refentry>

